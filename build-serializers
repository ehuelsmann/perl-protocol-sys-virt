#!/usr/bin/env perl

use v5.14;
use warnings FATAL => 'uninitialized';

use Carp::Always;
use Data::Dumper;
use JSON::PP;
use List::Util qw(max pairfirst);
use Scalar::Util qw(reftype);

use XDR::Parse;
use XDR::Gen;
use Protocol::Sys::Virt::Devel qw(extract_all);

my $source = '';
my @constants;
my @enums;
my @serializers;
my @deserializers;

my $tag = $ARGV[0];
my $version = $ARGV[1];


sub contents {
    my ($fn) = @_;
    local $/;
    open my $fh, '<:encoding(UTF-8)', $fn;
    <$fh>;
}

sub capture {
    my ($node, $definition, %options ) = @_;
    $source .= $definition;
    if ($options{type} eq 'constant') {
        push @constants, $options{transform}->( $node->{name}->{content} );
    }
    elsif ($options{type} eq 'enum') {
        my ($name, @rest) = @{ $options{names} };
        push @enums, {
            name => join('.', $options{transform}->( $name ), @rest),
            elements => [
                map {
                    $options{transform}->( $_->{name}->{content} )
                } @{ $node->{type}->{declaration}->{elements} }
                ],
        };
    }
    elsif ($options{type} eq 'deserializer') {
        push @deserializers, $options{transform}->( $node->{name}->{content} );
    }
    elsif ($options{type} eq 'serializer') {
        push @serializers, $options{transform}->( $node->{name}->{content} );
    }
}

sub find_toplevel_definition {
    my ($ast, $name) = @_;
    for my $def (@{ $ast } ) {
        next if $def->{def} eq 'passthrough';
        next if $def->{def} eq 'preprocessor';

        return $def
            if $def->{name}->{content} eq $name;
    }
    return;
}

sub call_reply_codecs {
    my ($ast, $template, $h_syms) = @_;
    my $procs = find_toplevel_definition($ast, 'remote_procedure');
    my (@args_encoders, @args_decoders,
        @ret_encoders, @ret_decoders,
        @msg_encoders, @msg_decoders);

    for my $proc ( @{ $procs->{definition}->{type}->{declaration}->{elements} } ) {
        my $proc_id   = $proc->{value}->{content};
        my $proc_name = $proc->{name}->{content};
        my $struct_basename = lc($proc_name =~ s/_PROC//r);

        if (my $msg = find_toplevel_definition(
                $ast,
                my $structname = ($struct_basename . '_msg')) ) {
            $msg_encoders[$proc_id] =
                qq|sub { my \$idx = 0; my \$rv = ''; \$remote->serialize_$structname(\$_[0], \$idx, \$rv); return \$rv; }|;
            $msg_decoders[$proc_id] =
                qq|sub { my \$idx = 0; my \$rv = ''; \$remote->deserialize_$structname(\$rv, \$idx, \$_[0]); return \$rv; }|;
            next;
        }
        if (my $args = find_toplevel_definition(
                $ast,
                my $structname = ($struct_basename . '_args')) ) {
            $structname =~ s/^remote_//;
            $args_encoders[$proc_id] =
                qq|sub { my \$idx = 0; my \$rv = ''; \$remote->serialize_$structname(\$_[0], \$idx, \$rv); return \$rv; }|;
            $args_decoders[$proc_id] =
                qq|sub { my \$idx = 0; my \$rv = ''; \$remote->deserialize_$structname(\$rv, \$idx, \$_[0]); return \$rv; }|;
        }
        else {
            $args_encoders[$proc_id] = '\&encode_no_args';
            $args_decoders[$proc_id] = '\&decode_no_args';
        }
        if (my $ret = find_toplevel_definition(
                $ast,
                my $structname = ($struct_basename . '_ret')) ) {
            $structname =~ s/^remote_//;
            $ret_encoders[$proc_id] =
                qq|sub { my \$idx = 0; my \$rv; \$remote->serialize_$structname(\$_[0], \$idx, \$rv); return \$rv; }|;
            $ret_decoders[$proc_id] =
                qq|sub { my \$idx = 0; my \$rv; \$remote->deserialize_$structname(\$rv, \$idx, \$_[0]); return \$rv; }|;
        }
        else {
            $ret_encoders[$proc_id] = '\&encode_no_ret';
            $ret_decoders[$proc_id] = '\&decode_no_ret';
        }
    }

    my $idx;

    $idx = 0;
    my $args_encode_tbl =
        join(",\n    ",
             map { my $rv = $_ // "invalid_proc($idx)"; $idx++; $rv } @args_encoders);
    $idx = 0;
    my $args_decode_tbl =
        join(",\n    ",
             map { my $rv = $_ // "invalid_proc($idx)"; $idx++; $rv } @args_decoders);
    $idx = 0;
    my $ret_encode_tbl =
        join(",\n    ",
             map { my $rv = $_ // "invalid_proc($idx)"; $idx++; $rv } @ret_encoders);
    $idx = 0;
    my $ret_decode_tbl =
        join(",\n    ",
             map { my $rv = $_ // "invalid_proc($idx)"; $idx++; $rv } @ret_decoders);
    $idx = 0;
    my $msg_encode_tbl =
        join(",\n    ",
             map { my $rv = $_ // "invalid_proc($idx)"; $idx++; $rv } @msg_encoders);
    $idx = 0;
    my $msg_decode_tbl =
        join(",\n    ",
             map { my $rv = $_ // "invalid_proc($idx)"; $idx++; $rv } @msg_decoders);

    my @constants = grep { $_->{mod} eq 'Remote' } @{ $h_syms };
    my $max = max map { length $_->{sym} } @constants;
    my $constants = join("\n    ",
                         map {
                             sprintf("%-${max}s => %s,", $_->{sym}, $_->{value})
                         } @constants);
    $constants = <<~CONSTANTS if $constants;
    use constant {
        $constants
    };
    CONSTANTS
    my $constants_pod = join("\n\n", map { "=item $_->{sym}" } @constants);
    my $codecs = <<~CODECS;
    my \@args_encoders = (
        $args_encode_tbl
        );

    my \@args_decoders = (
        $args_decode_tbl
        );

    my \@ret_encoders = (
        $ret_encode_tbl
        );

    my \@ret_decoders = (
        $ret_decode_tbl
        );

    my \@msg_encoders = (
        $msg_encode_tbl
        );

    my \@msg_decoders = (
        $msg_decode_tbl
        );
    CODECS

    my $tmpl = contents( $template );
    $tmpl =~ s/__CONSTANTS__/$constants/;
    $tmpl =~ s/__CONSTANTS_POD__/$constants_pod/;
    $tmpl =~ s/__CODEC_TABLES__/$codecs/;
    $tmpl;
}


sub _version_replacements {
    my $xdr_parse_version = shift;
    $_[0] =~ s/__XDR_PARSE_VERSION__/$xdr_parse_version/g;
    $_[0] =~ s/__XDR_GEN_VERSION__/$XDR::Gen::VERSION/g;
    $_[0] =~ s/__LIBVIRT_TAG__/$tag/g;
    $_[0] =~ s/__VERSION__/$version/g;
}


sub plain_content {
    my ($ast, $template, $h_syms) = @_;
    return contents( $template );
}

if (-d libvirt) {
    say "Deleting libvirt/...";
    system 'rm -rf libvirt/';
}
if (not -d 'libvirt') {
    system "git clone --depth 50 -b $tag  https://gitlab.com/libvirt/libvirt/";
}

my @modules = (
    {
        name        => 'transport',
        template    => 'templates/Transport.xdr.tmpl',
        transform   => sub { $_[0] =~ s/^(virNet(Message)?|VIR_NET_(MESSAGE_)?)//r; },
        module      => 'lib/Protocol/Sys/Virt/Transport/XDR.pm',
    },
    {
        name        => 'keepalive',
        template    => 'templates/KeepAlive.xdr.tmpl',
        transform   => sub { $_[0] =~ s/^KEEPALIVE_//ir; },
        module      => 'lib/Protocol/Sys/Virt/KeepAlive/XDR.pm',
    },
    {
        name        => 'remote',
        template    => 'templates/Remote.xdr.tmpl',
        transform   => sub { $_[0] =~ s/^remote_//ir; },
        module      => 'lib/Protocol/Sys/Virt/Remote/XDR.pm',
        additional  => [
            {
                template  => 'templates/Remote.pm.tmpl',
                generator => \&call_reply_codecs,
                module    => 'lib/Protocol/Sys/Virt/Remote.pm',
            },
            {
                template  => 'templates/Transport.pm.tmpl',
                generator => \&plain_content,
                module    => 'lib/Protocol/Sys/Virt/Transport.pm',
            },
            {
                template  => 'templates/Virt.pm.tmpl',
                generator => \&plain_content,
                module    => 'lib/Protocol/Sys/Virt.pm',
            },
            ]
    },
    );


my $api_data = extract_all( 'libvirt/' );
my $header_syms = $api_data->{header_syms};


for my $module (@modules) {
    my $ast = $api_data->{ast}->{$module->{name}};

    $source = '';
    @constants = ();
    @enums = ();
    @serializers = ();
    @deserializers = ();
    XDR::Gen->generate( $ast,
                        \&capture,
                        external_constants => {
                            VIR_SECURITY_MODEL_BUFLEN => ( 256 + 1),
                            VIR_SECURITY_LABEL_BUFLEN => (4096 + 1),
                            VIR_SECURITY_DOI_BUFLEN   => ( 256 + 1),
                            VIR_UUID_BUFLEN => 16,
                        },
                        transform => $module->{transform} );

    my $constants     = join("\n\n", map { "=item * $_" } @constants);
    my $enums         = join(
        "\n\n",
        map { "=item * $_->{name}\n\n=over 8\n\n"
                  . join("\n\n", map { "=item * $_" } @{ $_->{elements} })
                  . "\n\n=back"
        } @enums);
    my $serializers   = join("\n\n", map { "=item * $_" } @serializers);
    my $deserializers = join("\n\n", map { "=item * $_" } @deserializers);

    my $tmpl = contents( $module->{template} );
    $tmpl =~ s/__GENERATORCONTENT__/$source/;
    $tmpl =~ s/__CONSTANTS__/$constants/g;
    $tmpl =~ s/__ENUMS__/$enums/g;
    $tmpl =~ s/__SERIALIZERS__/$serializers/g;
    $tmpl =~ s/__DESERIALIZERS__/$deserializers/g;
    _version_replacements( $api_data->{xdr_parse_version}, $tmpl );

    open my $fh, '>:encoding(UTF-8)', $module->{module};
    print $fh $tmpl;

    if ($module->{additional}) {
        for my $addn ( @{ $module->{additional} } ) {
            my $content = $addn->{generator}->($ast,
                                               $addn->{template},
                                               $header_syms);
            $content =~ s/__XDR_PARSE_VERSION__/$api_data->{xdr_parse_version}/g;
            $content =~ s/__XDR_GEN_VERSION__/$XDR::Gen::VERSION/g;
            $content =~ s/__LIBVIRT_TAG__/$tag/g;
            $content =~ s/__VERSION__/$version/g;

            open my $fh, '>:encoding(UTF-8)', $addn->{module}
                or die "$!";
            say $fh $content;
        }
    }
}
